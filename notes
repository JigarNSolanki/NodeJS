https://jasonwatmore.com/post/2018/06/14/nodejs-mongodb-simple-api-for-authentication-registration-and-user-management

=> JWT
A JSON web token(JWT) is JSON Object which is used to securely transfer information over the web
(between two parties). It can be used for an authentication system and can also be used for 
information exchange.
In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:
1. Header
2. Payload
3. Signature

=> jsonwebtoken module
A module to implement JWT

=> express-jwt module
A module that provides Express middleware for validating JWTs (JSON Web Tokens) through the jsonwebtoken module.

==> Async function
Async functions are available natively in Node and are denoted by the async keyword in their declaration.
They always return a promise, even if you donâ€™t explicitly write them to do so. Also, the await keyword is 
only available inside async functions at the moment - it cannot be used in the global scope.
In an async function, you can await any Promise or catch its rejection cause.

==> Populate
Mongoose has a more powerful alternative called populate(), which lets you reference documents in other collections.
Population is the process of automatically replacing the specified paths in the document with document(s) from 
other collection(s).


========================= Create function of Expense ====================================
async function create2(req,res){
    body = req.body;
    var payee = await User.findById(body.id_by_whom);
    
    // var newExpense = Expense(body);
    // var savedExpense = await newExpense.save()
    // var newId = savedExpense._id;

    // payee.expenses = payee.expenses.concat(newId);

    receivers = body.to_whom;
    var i;
    for(i=0; i < receivers.length;i++){
        var id_r = receivers[i].id_of_receiver;
        var amount_r = receivers[i].amount_received;
        var receiver = await User.findById(id_r);
        // receiver.expenses = receiver.expenses.concat(newId);

        var index = payee.account.findIndex(p => p.username_ == receiver.username);
        if(index == -1){
            payee.account = payee.account.concat({
                "username_" : receiver.username,
                "balance_": amount_r
           });
           receiver.account = receiver.account.concat({
               "username_" : payee.username,
               "balance_": 0-amount_r
           });
        }
        else{
            payee.account[index].balance_ = payee.account[index].balance_ + amount_r;
            var index_r = receiver.account.findIndex(p => p.username_ == payee.username);
            receiver.account[index_r].balance_ = receiver.account[index_r].balance_ - amount_r;
        }
        receiver.save();
    };
    payee.save();
    res.send("Expense added successfully");
}
======================================================================================================